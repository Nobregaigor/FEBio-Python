{
  "INPUT-OPTIONS": {
    "INPUT_FILE": "Input file (AR): Uses this file as the main FEB file.",
    "FEB_FILE": "Feb file (AR): Same as input file, but will replace it if both are given.",
    "INPUT_FOLDER": "Input folder (AR): Finds all feb inside the given directory. Will overwrite input file or feb file if given.",
    "OUTPUT_FOLDER": "Output folder (O): Where the output file should be written. Default uses same directory as input folder.",
  
    "PROPERTIES_FOLDER": "Properties folder (O): Directory containg properties to add to feb. Properties must be xml files.",
    "SELECTED_PROPERTIES": "Selected properties (O): A string containg selected properties to include. To select all use -all-.",
    "EXCLUDE_PROPERTIES": "Exclude properties (O): A string containg selected properties to exclude.",

    "FIBERS_DATA_FOLDER": "Fibers data folder (O): Directory containg the fibers csv data files.",

    "CURVE_NAME": "Loadcurve name (R): A string that determines the name as the loadcurve will be saved as.",
    "CURVE_MODEL": "Loadcurve model (R): A string specifying the mathematical model to create the curve. Options are: <POLYNOMIAL>. ",
    "CURVE_PARAMS": "Loadcurve model (R): A string containing necesssary parameters to compute loadcurve. Must follow python syntax.",
    "CURVE_TYPE": "Loadcurve type (O): A string determining the type of curve to be used in FEB. Values can be: <smooth>, <step>, and others (see FEBio docs for more info).",
    "CURVE_FOLDER": "Loadcurve folder (O): Output directory of the created loadcurve.",

    "LOAD_NAME": "Loadcurve name (O): A string containing load names to be included in a FEB file. Names must be separated by < - >. To input all, use < all >. Filenames must contain the given LOAD_NAME.",
    "LOAD_FOLDER": "Loadcurve folder (O): Input directory which contains the loadcurve file.",
    "LOAD_ATTRS": "Load attributes (O): -- NOT USED, WILL BE REMOVED --",

    "FEB_NAME": "Feb name (O): Filenames of feb files to be used as the input files. Names must be separated by < - >. To input all, use < all >. Filenames must contain the given FEB_NAME.",
    "GEOMETRY_DATA_FOLDER": "Geometry data folder (O): Directory containing .csv geometry data files of the given FEB file. Geometry filenames must contain FEB_NAME and a specification of its type <nodes> or <elems>. Geometry folder must contain both nodes and elements files of desired FEB_NAME.",
    "PATH_TO_MATLAB_FOLDER": "Path to MATLAB folder (O): Directory containg matlab functions to be used with FEBio-Python. Can be a full path, but config file must specify JOIN_MATLAB_FOLDER as False, otherwise will join FEBIO-DIRECTORY path with given folder. Matlab .m files must be named as the function to be used and be able to run directly on cmd.",
    "MATLAB_PARAMS": "Matlab parameters (O): A string containg necessary parameters to execute matlab function. Must follow python syntax.",

    "STORAGE_NAME": "Storage name (R): Storage directory name.",
    "PATH_TO_STORAGE": "Path to storage (R): Path to given storage name.",

    "PARAM_VALS": "Parameter values (R): A string containg a dictionary of params to be modified in a FEB file. For now, it can only modify Material parameters (will include option to modify any in the future).",
    "SAVE_AS_NEW": "Save as new (O): A string <True> or <False> specifying if modified FEB file should be saved as a new file or be re-written.",

    "CONFIG_FILE": "Config file (R): Path to a config file to be used within a funtion."
  },

  "COMMANDS": {
    "ADD_PROPERTIES": {
      "short": "Adds selected properties to a given FEB.",
      "long": "This command can be used to add selected properties to one or more feb files. Properties must be a valid direct child of the febio_spec root and be named with its outermost element. Properties must be written in xml format."
    },
    "ADD_FIBERS": {
      "short": "Adds fibers data to a feb file.",
      "long": "This command can be used to add MeshData element to a feb file containing fibers data. Fibers are organized by element type and can be computed using CALCULATE_FIBERS command. Fibers data .csv file must contain the name of the FEB file which it refers to and first row must have node number information."
    },
    "CREATE_LOADCURVE": {
      "short": "Creates a load curve using FEB format (written in a xml file).",
      "long": "This command can be used to create a loadcurve with specified parameters."
    },
    "ADD_LOAD": {
      "short": "Add Loads and LoadData to a given feb file.",
      "long": "This command can be used to add one or more <loadcurve> to a <LoadData> or one or more <load> to a <Loads> in a FEB file. Moreover, loadfiles must contain the name of the load or loadcurve to be included. Loadcurves must also contain <loadcurve> in its name."
    },
    "EXTRACT_GEOMETRY_DATA": {
      "short": "Extract the geometry data (nodes and elements) from a given feb file.",
      "long": "This command is used to extract the geometry data (nodes and elements) from a given feb file. \nIt saves nodes and elements in seperate files in a .csv format where the first colum is the node or element id and the following columns are the geometry data."
    },
    "CALCULATE_FIBERS": {
      "short": "Calculates fiber orientation of a myocardium geometry.",
      "long": "This command is used to calculate the fibers of a generic myocardium geometry. It uses MATLAB to compute the fiber orientation and saves the output on a fibers data file."
    },
    "PREPARE": {
      "short": "Prepares and executes a mesh study. Can also be used to do a parametric study with fiber orientation.",
      "long": "This command can be used to prepare and execute a mesh or parametric study. It will use one or more raw FEB files, include all properties in a given <property> folder, inlude all loads in a <load> property, extract geometry data, compute fibers data and add them to the given feb files. Next, it will run all feb files in the saved directory. For now, it does not allow for skipping steps, but will add such functionality in the future."
    },
    "RUN_FEB": {
      "short": "Runs an feb file or all files in sub-folder of an input folder.",
      "long": "This command is used to run all FEB files in sub-folders of a given directory. Will add functionality to run all feb files in a single directory."
    },
    "CREATE_STORAGE_FOLDER": {
      "short": "Creates the main folders of a study storage.",
      "long": "This command can be used to set up a storage folder with the main folders of a study storage."
    },
    "CALCULATE_RESULTS": {
      "short": "ndy",
      "long": "ndy"
    },
    "MODIFY_PARAMETER": {
      "short": "Modifies given parameters of a feb file.",
      "long": "This command can be used to modify parameters of one or more feb file. "
    },
    "PREPARE_PARAMETER_STUDY": {
      "short": "Prepares a parametric study.",
      "long": "Prepares a parametric study."
    },
    "MAKE_PICKLE": {
      "short": "Makes a pickle from a colection of result files.",
      "long": "Makes a pickle from a colection of result files."
    }
  }
}